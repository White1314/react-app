{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar atob = require('atob');\n\nglobal.atob = atob;\nvar BASE_URL = 'https://api.github.com';\n\nvar getApiData = function getApiData(ctx, path) {\n  var isServer, result, data, _ref, oauth, _ref2, token_type, access_token, headers, _result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n          isServer = false; // 客户端请求没有 session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 11;\n            break;\n          }\n\n          // 转发到客户端\n          url = \"/api\".concat(path);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios({\n            url: url\n          }));\n\n        case 5:\n          result = _context.sent;\n          data = result.data ? result.data.data : [];\n          console.log(data);\n          return _context.abrupt(\"return\", data);\n\n        case 11:\n          url = \"\".concat(BASE_URL).concat(path); // 服务端可直接获取 session\n\n          _ref = ctx.session || '', oauth = _ref.oauth;\n          _ref2 = oauth ? oauth : {}, token_type = _ref2.token_type, access_token = _ref2.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 17:\n          _result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = _result ? _result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","atob","global","BASE_URL","getApiData","ctx","path","isServer","url","result","data","console","log","session","oauth","token_type","access_token","headers","Authorization","method","err","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEAE,MAAM,CAACD,IAAP,GAAcA,IAAd;AAEA,IAAME,QAAQ,GAAG,wBAAjB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjB;AACIC,UAAAA,QAFa,UAIjB;;AAJiB,cAKZA,QALY;AAAA;AAAA;AAAA;;AAMf;AACAC,UAAAA,GAAG,iBAAUF,IAAV,CAAH;AAPe;AAAA,2CAQMP,KAAK,CAAC;AAAES,YAAAA,GAAG,EAAHA;AAAF,WAAD,CARX;;AAAA;AAQTC,UAAAA,MARS;AASXC,UAAAA,IATW,GASJD,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACC,IAAP,CAAYA,IAA1B,GAAiC,EAT7B;AAUfC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAVe,2CAWRA,IAXQ;;AAAA;AAafF,UAAAA,GAAG,aAAML,QAAN,SAAiBG,IAAjB,CAAH,CAbe,CAcf;;AAde,iBAeGD,GAAG,CAACQ,OAAJ,IAAe,EAflB,EAePC,KAfO,QAePA,KAfO;AAAA,kBAgBsBA,KAAK,GAAGA,KAAH,GAAW,EAhBtC,EAgBPC,UAhBO,SAgBPA,UAhBO,EAgBKC,YAhBL,SAgBKA,YAhBL;AAiBXC,UAAAA,OAjBW,GAiBDH,KAAK,GACf;AACEI,YAAAA,aAAa,YAAKH,UAAL,cAAmBC,YAAnB;AADf,WADe,GAIf,EArBW;AAAA;AAAA,2CAsBMjB,KAAK,CAAC;AACzBS,YAAAA,GAAG,EAAHA,GADyB;AAEzBW,YAAAA,MAAM,EAAE,KAFiB;AAGzBF,YAAAA,OAAO,EAAPA;AAHyB,WAAD,CAAL,UAIZ,UAACG,GAAD,EAAS,CAAE,CAJC,CAtBN;;AAAA;AAsBTX,UAAAA,OAtBS;AA2BfE,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACIF,UAAAA,KA5BW,GA4BJD,OAAM,GAAGA,OAAM,CAACC,IAAV,GAAiB,EA5BnB;AAAA,2CA6BRA,KA7BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAiCAW,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\nconst atob = require('atob');\r\n\r\nglobal.atob = atob;\r\n\r\nconst BASE_URL = 'https://api.github.com';\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n\r\n  // 客户端请求没有 session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    // 转发到客户端\r\n    url = `/api${path}`;\r\n    const result = await axios({ url });\r\n    let data = result.data ? result.data.data : [];\r\n    console.log(data);\r\n    return data;\r\n  } else {\r\n    url = `${BASE_URL}${path}`;\r\n    // 服务端可直接获取 session\r\n    const { oauth } = ctx.session || '';\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    let headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}