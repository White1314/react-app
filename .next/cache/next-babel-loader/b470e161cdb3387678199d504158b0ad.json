{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar atob = require('atob');\n\nglobal.atob = atob;\nvar BASE_URL = 'https://api.github.com';\n\nvar _require = require('../config'),\n    SEARCH_REPOSITY_URL = _require.SEARCH_REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL,\n    REPOSITY_DETAIL_URL = _require.REPOSITY_DETAIL_URL;\n\nvar _require2 = require('./getPath'),\n    getParamsToString = _require2.getParamsToString,\n    getQueryToSlash = _require2.getQueryToSlash;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, isServer, headers, _path, result, data, oauth, _ref, token_type, access_token, _result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = '';\n          console.log(ctx.path);\n          console.log(ctx.url);\n          url = ctx.path + getParamsToString(ctx.query);\n          console.log(url);\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/user/repos' ? 8 : _context.t0 === '/api/user/starred' ? 10 : _context.t0 === '/api/search' ? 12 : _context.t0 === '/api/detail/user' ? 14 : _context.t0 === '/api/detail/readme' ? 16 : _context.t0 === '/api/detail/issues' ? 18 : 20;\n          break;\n\n        case 8:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 21);\n\n        case 10:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 21);\n\n        case 12:\n          url = SEARCH_REPOSITY_URL + getParamsToString(ctx.query);\n          return _context.abrupt(\"break\", 21);\n\n        case 14:\n          url = REPOSITY_DETAIL_URL + getQueryToSlash(ctx.query);\n          return _context.abrupt(\"break\", 21);\n\n        case 16:\n          url = REPOSITY_DETAIL_URL + getQueryToSlash(ctx.query) + '/readme';\n          return _context.abrupt(\"break\", 21);\n\n        case 18:\n          url = REPOSITY_DETAIL_URL + getQueryToSlash(ctx.query) + '/issues';\n          return _context.abrupt(\"break\", 21);\n\n        case 20:\n          return _context.abrupt(\"break\", 21);\n\n        case 21:\n          // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n          isServer = false;\n          headers = {}; // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 34;\n            break;\n          }\n\n          console.log(ctx); // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n          _path = '/api' + ctx.asPath;\n          _context.next = 28;\n          return _regeneratorRuntime.awrap(axios({\n            url: _path,\n            method: 'get'\n          }));\n\n        case 28:\n          result = _context.sent;\n          console.log(result);\n          data = result.data.code === 0 ? result.data.data : [];\n          return _context.abrupt(\"return\", data);\n\n        case 34:\n          // 服务端可直接获取 ctx\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 39;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 39:\n          _result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = _result ? _result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 43:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","atob","global","BASE_URL","SEARCH_REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","REPOSITY_DETAIL_URL","getParamsToString","getQueryToSlash","getApiData","ctx","path","url","console","log","query","isServer","headers","asPath","method","result","data","code","oauth","req","session","token_type","access_token","Authorization","err","module","exports"],"mappings":"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","sourcesContent":["const axios = require('axios');\r\nconst atob = require('atob');\r\n\r\nglobal.atob = atob;\r\n\r\nconst BASE_URL = 'https://api.github.com';\r\n\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\n\r\nconst { getParamsToString, getQueryToSlash } = require('./getPath');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  let url = '';\r\n  console.log(ctx.path);\r\n  console.log(ctx.url);\r\n  url = ctx.path + getParamsToString(ctx.query);\r\n  console.log(url);\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      url = SEARCH_REPOSITY_URL + getParamsToString(ctx.query);\r\n      break;\r\n    case '/api/detail/user':\r\n      url = REPOSITY_DETAIL_URL + getQueryToSlash(ctx.query);\r\n      break;\r\n    case '/api/detail/readme':\r\n      url = REPOSITY_DETAIL_URL + getQueryToSlash(ctx.query) + '/readme';\r\n      break;\r\n    case '/api/detail/issues':\r\n      url = REPOSITY_DETAIL_URL + getQueryToSlash(ctx.query) + '/issues';\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    let path = '/api' + ctx.asPath;\r\n    const result = await axios({ url: path, method: 'get' });\r\n    console.log(result);\r\n    let data = result.data.code === 0 ? result.data.data : [];\r\n    return data;\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}