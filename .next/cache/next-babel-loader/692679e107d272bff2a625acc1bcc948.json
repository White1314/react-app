{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar _require = require('../config'),\n    REPOSITY_URL = _require.REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, params, _ctx$query, q, lang, sort, order, isServer, headers, oauth, _ref, token_type, access_token, result, data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = '';\n          params = {}; // 根据客户端请求的 path 匹配对应的 github api url\n\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/user/repos' ? 5 : _context.t0 === '/api/user/starred' ? 7 : _context.t0 === '/api/search/repo' ? 9 : 12;\n          break;\n\n        case 5:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 13);\n\n        case 7:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 13);\n\n        case 9:\n          _ctx$query = ctx.query, q = _ctx$query.q, lang = _ctx$query.lang, sort = _ctx$query.sort, order = _ctx$query.order;\n          params = {\n            q: q,\n            lang: lang,\n            sort: sort,\n            order: order\n          };\n          url = REPOSITY_URL;\n\n        case 12:\n          return _context.abrupt(\"break\", 13);\n\n        case 13:\n          // 判断当前为请求环境是否为服务端\n          isServer = false;\n          headers = {};\n\n          if (!isServer) {\n            _context.next = 25;\n            break;\n          }\n\n          // 服务端获取 ctx\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            params: params,\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 21:\n          result = _context.sent;\n          console.log('get result');\n          data = result ? result.data : [];\n          return _context.abrupt(\"return\", data);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","getApiData","ctx","path","url","params","query","q","lang","sort","order","isServer","headers","oauth","req","session","token_type","access_token","Authorization","method","err","result","console","log","data","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eAC2DA,OAAO,CAAC,WAAD,C;IAA1DC,Y,YAAAA,Y;IAAcC,iB,YAAAA,iB;IAAmBC,a,YAAAA,a;;AAEzC,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,GADa,GACP,EADO;AAEbC,UAAAA,MAFa,GAEJ,EAFI,EAGjB;;AAHiB,wBAITF,IAJS;AAAA,0CAKV,iBALU,uBAQV,mBARU,uBAWV,kBAXU;AAAA;;AAAA;AAMbC,UAAAA,GAAG,GAAGL,iBAAN;AANa;;AAAA;AASbK,UAAAA,GAAG,GAAGJ,aAAN;AATa;;AAAA;AAAA,uBAYkBE,GAAG,CAACI,KAZtB,EAYPC,CAZO,cAYPA,CAZO,EAYJC,IAZI,cAYJA,IAZI,EAYEC,IAZF,cAYEA,IAZF,EAYQC,KAZR,cAYQA,KAZR;AAabL,UAAAA,MAAM,GAAG;AAAEE,YAAAA,CAAC,EAADA,CAAF;AAAKC,YAAAA,IAAI,EAAJA,IAAL;AAAWC,YAAAA,IAAI,EAAJA,IAAX;AAAiBC,YAAAA,KAAK,EAALA;AAAjB,WAAT;AACAN,UAAAA,GAAG,GAAGN,YAAN;;AAda;AAAA;;AAAA;AAkBjB;AACIa,UAAAA,QAnBa;AAoBbC,UAAAA,OApBa,GAoBH,EApBG;;AAAA,eAqBbD,QArBa;AAAA;AAAA;AAAA;;AAsBf;AACQE,UAAAA,KAvBO,GAuBGX,GAAG,CAACY,GAAJ,CAAQC,OAvBX,CAuBPF,KAvBO;AAAA,iBAwBsBA,KAAK,GAAGA,KAAH,GAAW,EAxBtC,EAwBPG,UAxBO,QAwBPA,UAxBO,EAwBKC,YAxBL,QAwBKA,YAxBL;AAyBfL,UAAAA,OAAO,GAAGC,KAAK,GACX;AACEK,YAAAA,aAAa,YAAKF,UAAL,cAAmBC,YAAnB;AADf,WADW,GAIX,EAJJ;AAzBe;AAAA,2CA8BMrB,KAAK,CAAC;AACzBQ,YAAAA,GAAG,EAAHA,GADyB;AAEzBe,YAAAA,MAAM,EAAE,KAFiB;AAGzBd,YAAAA,MAAM,EAANA,MAHyB;AAIzBO,YAAAA,OAAO,EAAPA;AAJyB,WAAD,CAAL,UAKZ,UAACQ,GAAD,EAAS,CAAE,CALC,CA9BN;;AAAA;AA8BTC,UAAAA,MA9BS;AAoCfC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACIC,UAAAA,IArCW,GAqCJH,MAAM,GAAGA,MAAM,CAACG,IAAV,GAAiB,EArCnB;AAAA,2CAsCRA,IAtCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AA0CAC,MAAM,CAACC,OAAP,GAAiB;AACfzB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\nconst { REPOSITY_URL, USER_REPOSITY_URL, USER_STAR_URL } = require('../config');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  let url = '';\r\n  let params = {};\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search/repo':\r\n      let { q, lang, sort, order } = ctx.query;\r\n      params = { q, lang, sort, order };\r\n      url = REPOSITY_URL;\r\n    default:\r\n      break;\r\n  }\r\n  // 判断当前为请求环境是否为服务端\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n  if (isServer) {\r\n    // 服务端获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      params,\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('get result');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}