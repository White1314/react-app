{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport * as constants from '../constants';\nconst reducers = {\n  // 类似 user: useReducer\n  user: (state = {\n    name: 'white'\n  }, action) => {\n    switch (action.type) {\n      case constants.GET_USER_INFO:\n        return _objectSpread({}, state, {}, action.payload);\n\n      default:\n        return state;\n    }\n  }\n}; // 中间件\n\nconst middleware = [thunk];\nconst reducer = combineReducers(reducers); // initState 接受服务端的数据并更新数据\n\nfunction initStore(initState = {}) {\n  return createStore(reducer, initState, composeWithDevTools(applyMiddleware(...middleware)));\n}\n\nexport default initStore;","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/reducers/index.tsx"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","constants","reducers","user","state","name","action","type","GET_USER_INFO","payload","middleware","reducer","initStore","initState"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AAOA,MAAMC,QAAQ,GAAG;AACf;AACAC,EAAAA,IAAI,EAAE,CAACC,KAAK,GAAG;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAT,EAA4BC,MAA5B,KAA0C;AAC9C,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKN,SAAS,CAACO,aAAf;AACE,iCAAYJ,KAAZ,MAAsBE,MAAM,CAACG,OAA7B;;AACF;AACE,eAAOL,KAAP;AAJJ;AAMD;AATc,CAAjB,C,CAYA;;AACA,MAAMM,UAAU,GAAG,CAACX,KAAD,CAAnB;AACA,MAAMY,OAAO,GAAGd,eAAe,CAACK,QAAD,CAA/B,C,CAEA;;AACA,SAASU,SAAT,CAAmBC,SAAS,GAAG,EAA/B,EAAmC;AACjC,SAAOjB,WAAW,CAChBe,OADgB,EAEhBE,SAFgB,EAGhBb,mBAAmB,CAACF,eAAe,CAAC,GAAGY,UAAJ,CAAhB,CAHH,CAAlB;AAKD;;AACD,eAAeE,SAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport * as constants from '../constants';\r\n\r\ninterface A {\r\n  type?: string;\r\n  payload?: any;\r\n}\r\n\r\nconst reducers = {\r\n  // 类似 user: useReducer\r\n  user: (state = { name: 'white' }, action: A) => {\r\n    switch (action.type) {\r\n      case constants.GET_USER_INFO:\r\n        return { ...state, ...action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n};\r\n\r\n// 中间件\r\nconst middleware = [thunk];\r\nconst reducer = combineReducers(reducers);\r\n\r\n// initState 接受服务端的数据并更新数据\r\nfunction initStore(initState = {}) {\r\n  return createStore(\r\n    reducer,\r\n    initState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n  );\r\n}\r\nexport default initStore;\r\n"]},"metadata":{},"sourceType":"module"}