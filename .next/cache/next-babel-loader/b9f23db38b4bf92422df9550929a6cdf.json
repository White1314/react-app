{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar atob = require('atob');\n\nglobal.atob = atob;\nvar BASE_URL = 'https://api.github.com';\n/*\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\n\r\nconst { getParamsToString, getQueryToSlash } = require('./getPath');\r\n*/\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, isServer, data, _ref, oauth, _ref2, token_type, access_token, headers, result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = ''; // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n\n          isServer = false; // 客户端请求没有 session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 15;\n            break;\n          }\n\n          // 转发到客户端\n          url = \"/api\".concat(path);\n          console.log(url);\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(axios({\n            url: url\n          }));\n\n        case 7:\n          _context.t0 = _context.sent;\n\n          if (_context.t0) {\n            _context.next = 10;\n            break;\n          }\n\n          _context.t0 = [];\n\n        case 10:\n          data = _context.t0;\n          console.log(data);\n          return _context.abrupt(\"return\", data);\n\n        case 15:\n          url = BASE_URL + path; // 服务端可直接获取 session\n\n          _ref = ctx.session || '', oauth = _ref.oauth;\n          _ref2 = oauth ? oauth : {}, token_type = _ref2.token_type, access_token = _ref2.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 21:\n          result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = result ? result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","atob","global","BASE_URL","getApiData","ctx","path","url","isServer","console","log","data","session","oauth","token_type","access_token","headers","Authorization","method","err","result","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEAE,MAAM,CAACD,IAAP,GAAcA,IAAd;AAEA,IAAME,QAAQ,GAAG,wBAAjB;AACA;;;;;;;;;;;AAUA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,GADa,GACP,EADO,EAGjB;;AACIC,UAAAA,QAJa,UAMjB;;AANiB,cAOZA,QAPY;AAAA;AAAA;AAAA;;AAQf;AACAD,UAAAA,GAAG,iBAAUD,IAAV,CAAH;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AAVe;AAAA,2CAWKR,KAAK,CAAC;AAAEQ,YAAAA,GAAG,EAAHA;AAAF,WAAD,CAXV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA,wBAWwB,EAXxB;;AAAA;AAWTI,UAAAA,IAXS;AAYfF,UAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AAZe,2CAaRA,IAbQ;;AAAA;AAefJ,UAAAA,GAAG,GAAGJ,QAAQ,GAAGG,IAAjB,CAfe,CAgBf;;AAhBe,iBAiBGD,GAAG,CAACO,OAAJ,IAAe,EAjBlB,EAiBPC,KAjBO,QAiBPA,KAjBO;AAAA,kBAkBsBA,KAAK,GAAGA,KAAH,GAAW,EAlBtC,EAkBPC,UAlBO,SAkBPA,UAlBO,EAkBKC,YAlBL,SAkBKA,YAlBL;AAmBXC,UAAAA,OAnBW,GAmBDH,KAAK,GACf;AACEI,YAAAA,aAAa,YAAKH,UAAL,cAAmBC,YAAnB;AADf,WADe,GAIf,EAvBW;AAAA;AAAA,2CAwBMhB,KAAK,CAAC;AACzBQ,YAAAA,GAAG,EAAHA,GADyB;AAEzBW,YAAAA,MAAM,EAAE,KAFiB;AAGzBF,YAAAA,OAAO,EAAPA;AAHyB,WAAD,CAAL,UAIZ,UAACG,GAAD,EAAS,CAAE,CAJC,CAxBN;;AAAA;AAwBTC,UAAAA,MAxBS;AA6BfX,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACIC,UAAAA,KA9BW,GA8BJS,MAAM,GAAGA,MAAM,CAACT,IAAV,GAAiB,EA9BnB;AAAA,2CA+BRA,KA/BQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAmCAU,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\nconst atob = require('atob');\r\n\r\nglobal.atob = atob;\r\n\r\nconst BASE_URL = 'https://api.github.com';\r\n/*\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\n\r\nconst { getParamsToString, getQueryToSlash } = require('./getPath');\r\n*/\r\nconst getApiData = async (ctx, path) => {\r\n  let url = '';\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n\r\n  // 客户端请求没有 session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    // 转发到客户端\r\n    url = `/api${path}`;\r\n    console.log(url);\r\n    const data = (await axios({ url })) || [];\r\n    console.log(data);\r\n    return data;\r\n  } else {\r\n    url = BASE_URL + path;\r\n    // 服务端可直接获取 session\r\n    const { oauth } = ctx.session || '';\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    let headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}