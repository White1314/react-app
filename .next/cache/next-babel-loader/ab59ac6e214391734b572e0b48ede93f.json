{"ast":null,"code":"const axios = require('axios');\n\nconst {\n  SEARCH_REPOSITY_URL,\n  USER_REPOSITY_URL,\n  USER_STAR_URL,\n  REPOSITY_DETAIL_URL\n} = require('../config');\n\nconst getApiData = async (ctx, path) => {\n  // 根据客户端请求的 path 匹配对应的 github api url\n  let url = '';\n  let {\n    asPath\n  } = ctx;\n  console.log(asPath.replace('/*.?', ''));\n\n  switch (path) {\n    case '/api/user/repos':\n      url = USER_REPOSITY_URL;\n      break;\n\n    case '/api/user/starred':\n      url = USER_STAR_URL;\n      break;\n\n    case '/api/search':\n      url = SEARCH_REPOSITY_URL;\n      break;\n\n    case '/api/detail':\n      url = REPOSITY_DETAIL_URL;\n      break;\n\n    default:\n      break;\n  } // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n\n\n  let isServer = true;\n  let headers = {}; // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\n\n  if (!isServer) {\n    console.log(ctx); // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n    let path = '/api' + ctx.asPath;\n    const result = await axios({\n      url: path,\n      method: 'get'\n    });\n    console.log(result);\n    let data = result.data.code === 0 ? result.data.data : [];\n    return data;\n  } else {\n    // 服务端可直接获取 ctx\n    const {\n      oauth\n    } = ctx.req.session;\n    const {\n      token_type,\n      access_token\n    } = oauth ? oauth : {};\n    headers = oauth ? {\n      Authorization: `${token_type} ${access_token}`\n    } : {};\n    const result = await axios({\n      url,\n      method: 'get',\n      headers\n    }).catch(err => {});\n    console.log('服务端获取数据成功');\n    let data = result ? result.data : [];\n    return data;\n  }\n};\n\nmodule.exports = {\n  getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","SEARCH_REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","REPOSITY_DETAIL_URL","getApiData","ctx","path","url","asPath","console","log","replace","isServer","headers","result","method","data","code","oauth","req","session","token_type","access_token","Authorization","catch","err","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAM;AACJC,EAAAA,mBADI;AAEJC,EAAAA,iBAFI;AAGJC,EAAAA,aAHI;AAIJC,EAAAA;AAJI,IAKFJ,OAAO,CAAC,WAAD,CALX;;AAOA,MAAMK,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACtC;AACA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAI;AAAEC,IAAAA;AAAF,MAAaH,GAAjB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,OAAP,CAAe,MAAf,EAAuB,EAAvB,CAAZ;;AACA,UAAQL,IAAR;AACE,SAAK,iBAAL;AACEC,MAAAA,GAAG,GAAGN,iBAAN;AACA;;AACF,SAAK,mBAAL;AACEM,MAAAA,GAAG,GAAGL,aAAN;AACA;;AACF,SAAK,aAAL;AACEK,MAAAA,GAAG,GAAGP,mBAAN;AACA;;AACF,SAAK,aAAL;AACEO,MAAAA,GAAG,GAAGJ,mBAAN;AACA;;AACF;AACE;AAdJ,GALsC,CAsBtC;;;AACA,MAAIS,QAAQ,OAAZ;AACA,MAAIC,OAAO,GAAG,EAAd,CAxBsC,CA0BtC;;AACA,MAAI,CAACD,QAAL,EAAe;AACbH,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ,EADa,CAEb;;AACA,QAAIC,IAAI,GAAG,SAASD,GAAG,CAACG,MAAxB;AACA,UAAMM,MAAM,GAAG,MAAMhB,KAAK,CAAC;AAAES,MAAAA,GAAG,EAAED,IAAP;AAAaS,MAAAA,MAAM,EAAE;AAArB,KAAD,CAA1B;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACA,QAAIE,IAAI,GAAGF,MAAM,CAACE,IAAP,CAAYC,IAAZ,KAAqB,CAArB,GAAyBH,MAAM,CAACE,IAAP,CAAYA,IAArC,GAA4C,EAAvD;AACA,WAAOA,IAAP;AACD,GARD,MAQO;AACL;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAYb,GAAG,CAACc,GAAJ,CAAQC,OAA1B;AACA,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA+BJ,KAAK,GAAGA,KAAH,GAAW,EAArD;AACAL,IAAAA,OAAO,GAAGK,KAAK,GACX;AACEK,MAAAA,aAAa,EAAG,GAAEF,UAAW,IAAGC,YAAa;AAD/C,KADW,GAIX,EAJJ;AAKA,UAAMR,MAAM,GAAG,MAAMhB,KAAK,CAAC;AACzBS,MAAAA,GADyB;AAEzBQ,MAAAA,MAAM,EAAE,KAFiB;AAGzBF,MAAAA;AAHyB,KAAD,CAAL,CAIlBW,KAJkB,CAIXC,GAAD,IAAS,CAAE,CAJC,CAArB;AAKAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAIM,IAAI,GAAGF,MAAM,GAAGA,MAAM,CAACE,IAAV,GAAiB,EAAlC;AACA,WAAOA,IAAP;AACD;AACF,CArDD;;AAuDAU,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\n\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  let url = '';\r\n  let { asPath } = ctx;\r\n  console.log(asPath.replace('/*.?', ''));\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      url = SEARCH_REPOSITY_URL;\r\n      break;\r\n    case '/api/detail':\r\n      url = REPOSITY_DETAIL_URL;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    let path = '/api' + ctx.asPath;\r\n    const result = await axios({ url: path, method: 'get' });\r\n    console.log(result);\r\n    let data = result.data.code === 0 ? result.data.data : [];\r\n    return data;\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}