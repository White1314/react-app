{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nexport const getLastUpdated = time => {\n  return moment(time).fromNow();\n};\nexport const getParamsToPath = params => {\n  let keys = Object.keys(params);\n  let values = Object.values(params);\n  let path = '';\n  keys.forEach(function (item, index) {\n    let str = `${item}=${values[index]}`;\n\n    if (!index) {\n      path += `?${str}`;\n      return;\n    }\n\n    path += `&${str}`;\n  });\n  return path;\n};\nexport const getLink = (item, query) => {\n  let params = {};\n\n  if (typeof item === 'string') {\n    // 语言\n    params = _objectSpread({}, query, {}, {\n      lang: item\n    });\n  } else if (typeof item === 'number') {\n    // 分页\n    params = _objectSpread({}, query, {}, {\n      page: item\n    });\n  } else {\n    // 排序\n    params = _objectSpread({}, query, {}, {\n      sort: item.value,\n      order: item.order\n    });\n  }\n\n  return getParamsToPath(params);\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/utils/index.tsx"],"names":["moment","getLastUpdated","time","fromNow","getParamsToPath","params","keys","Object","values","path","forEach","item","index","str","getLink","query","lang","page","sort","value","order"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAe;AAC3C,SAAOF,MAAM,CAACE,IAAD,CAAN,CAAaC,OAAb,EAAP;AACD,CAFM;AAIP,OAAO,MAAMC,eAAe,GAAIC,MAAD,IAAiB;AAC9C,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,MAAZ,CAAX;AACA,MAAIG,MAAM,GAAGD,MAAM,CAACC,MAAP,CAAcH,MAAd,CAAb;AACA,MAAII,IAAI,GAAG,EAAX;AACAH,EAAAA,IAAI,CAACI,OAAL,CAAa,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAClC,QAAIC,GAAG,GAAI,GAAEF,IAAK,IAAGH,MAAM,CAACI,KAAD,CAAQ,EAAnC;;AACA,QAAI,CAACA,KAAL,EAAY;AACVH,MAAAA,IAAI,IAAK,IAAGI,GAAI,EAAhB;AACA;AACD;;AACDJ,IAAAA,IAAI,IAAK,IAAGI,GAAI,EAAhB;AACD,GAPD;AAQA,SAAOJ,IAAP;AACD,CAbM;AA2BP,OAAO,MAAMK,OAAO,GAAG,CAACH,IAAD,EAA4BI,KAA5B,KAAyC;AAC9D,MAAIV,MAAM,GAAG,EAAb;;AACA,MAAI,OAAOM,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACAN,IAAAA,MAAM,qBAAQU,KAAR,MAAkB;AAAEC,MAAAA,IAAI,EAAEL;AAAR,KAAlB,CAAN;AACD,GAHD,MAGO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACnC;AACAN,IAAAA,MAAM,qBAAQU,KAAR,MAAkB;AAAEE,MAAAA,IAAI,EAAEN;AAAR,KAAlB,CAAN;AACD,GAHM,MAGA;AACL;AACAN,IAAAA,MAAM,qBAAQU,KAAR,MAAkB;AAAEG,MAAAA,IAAI,EAAEP,IAAI,CAACQ,KAAb;AAAoBC,MAAAA,KAAK,EAAET,IAAI,CAACS;AAAhC,KAAlB,CAAN;AACD;;AACD,SAAOhB,eAAe,CAACC,MAAD,CAAtB;AACD,CAbM","sourcesContent":["import moment from 'moment';\r\nimport atob from 'atob';\r\n\r\nexport const getLastUpdated = (time: any) => {\r\n  return moment(time).fromNow();\r\n};\r\n\r\nexport const getParamsToPath = (params: any) => {\r\n  let keys = Object.keys(params);\r\n  let values = Object.values(params);\r\n  let path = '';\r\n  keys.forEach(function (item, index) {\r\n    let str = `${item}=${values[index]}`;\r\n    if (!index) {\r\n      path += `?${str}`;\r\n      return;\r\n    }\r\n    path += `&${str}`;\r\n  });\r\n  return path;\r\n};\r\n\r\ninterface I {\r\n  value: string;\r\n  order: string;\r\n}\r\n\r\ninterface Q {\r\n  q: string;\r\n  lang: string;\r\n  sort: string;\r\n  order: string;\r\n}\r\n\r\nexport const getLink = (item: string | I | number, query: Q) => {\r\n  let params = {};\r\n  if (typeof item === 'string') {\r\n    // 语言\r\n    params = { ...query, ...{ lang: item } };\r\n  } else if (typeof item === 'number') {\r\n    // 分页\r\n    params = { ...query, ...{ page: item } };\r\n  } else {\r\n    // 排序\r\n    params = { ...query, ...{ sort: item.value, order: item.order } };\r\n  }\r\n  return getParamsToPath(params);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}