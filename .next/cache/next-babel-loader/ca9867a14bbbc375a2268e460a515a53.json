{"ast":null,"code":"const axios = require('axios');\n\nconst {\n  REPOSITY_URL,\n  USER_REPOSITY_URL,\n  USER_STAR_URL\n} = require('../config');\n\nconst successInfo = (msg, data) => ({\n  code: 0,\n  msg,\n  data\n});\n\nconst getApiData = async (ctx, path) => {\n  let url = '';\n  let params = {}; // 根据客户端请求的 path 匹配对应的 github api url\n\n  switch (path) {\n    case '/api/user/repos':\n      url = USER_REPOSITY_URL;\n      break;\n\n    case '/api/user/starred':\n      url = USER_STAR_URL;\n      break;\n\n    case '/api/search':\n      let {\n        q,\n        lang,\n        sort,\n        order\n      } = ctx.query;\n      params = {\n        q,\n        lang,\n        sort,\n        order\n      };\n      url = REPOSITY_URL;\n\n    default:\n      break;\n  } // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n\n\n  let isServer = true;\n  let headers = {}; // 客户端请求没有 req，需代理到服务器上\n\n  if (!isServer) {\n    console.log(ctx);\n    const url = '/api' + ctx.asPath; // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n    const result = await axios({\n      url,\n      method: 'get'\n    });\n    let data = result ? result.data : [];\n    ctx.body = successInfo('客户端代理获取数据成功', data);\n  } else {\n    // 服务端可直接获取 ctx\n    const {\n      oauth\n    } = ctx.req.session;\n    const {\n      token_type,\n      access_token\n    } = oauth ? oauth : {};\n    headers = oauth ? {\n      Authorization: `${token_type} ${access_token}`\n    } : {};\n    const result = await axios({\n      url,\n      method: 'get',\n      params,\n      headers\n    }).catch(err => {});\n    console.log('服务端获取数据成功');\n    let data = result ? result.data : [];\n    return data;\n  }\n};\n\nmodule.exports = {\n  getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","successInfo","msg","data","code","getApiData","ctx","path","url","params","q","lang","sort","order","query","isServer","headers","console","log","asPath","result","method","body","oauth","req","session","token_type","access_token","Authorization","catch","err","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,iBAAhB;AAAmCC,EAAAA;AAAnC,IAAqDH,OAAO,CAAC,WAAD,CAAlE;;AACA,MAAMI,WAAW,GAAG,CAACC,GAAD,EAAMC,IAAN,MAAgB;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWF,EAAAA,GAAX;AAAgBC,EAAAA;AAAhB,CAAhB,CAApB;;AAEA,MAAME,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,KAAqB;AACtC,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,MAAM,GAAG,EAAb,CAFsC,CAGtC;;AACA,UAAQF,IAAR;AACE,SAAK,iBAAL;AACEC,MAAAA,GAAG,GAAGT,iBAAN;AACA;;AACF,SAAK,mBAAL;AACES,MAAAA,GAAG,GAAGR,aAAN;AACA;;AACF,SAAK,aAAL;AACE,UAAI;AAAEU,QAAAA,CAAF;AAAKC,QAAAA,IAAL;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,UAA2BP,GAAG,CAACQ,KAAnC;AACAL,MAAAA,MAAM,GAAG;AAAEC,QAAAA,CAAF;AAAKC,QAAAA,IAAL;AAAWC,QAAAA,IAAX;AAAiBC,QAAAA;AAAjB,OAAT;AACAL,MAAAA,GAAG,GAAGV,YAAN;;AACF;AACE;AAZJ,GAJsC,CAmBtC;;;AACA,MAAIiB,QAAQ,OAAZ;AACA,MAAIC,OAAO,GAAG,EAAd,CArBsC,CAuBtC;;AACA,MAAI,CAACD,QAAL,EAAe;AACbE,IAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ;AACA,UAAME,GAAG,GAAG,SAASF,GAAG,CAACa,MAAzB,CAFa,CAGb;;AACA,UAAMC,MAAM,GAAG,MAAMxB,KAAK,CAAC;AAAEY,MAAAA,GAAF;AAAOa,MAAAA,MAAM,EAAE;AAAf,KAAD,CAA1B;AACA,QAAIlB,IAAI,GAAGiB,MAAM,GAAGA,MAAM,CAACjB,IAAV,GAAiB,EAAlC;AACAG,IAAAA,GAAG,CAACgB,IAAJ,GAAWrB,WAAW,CAAC,aAAD,EAAgBE,IAAhB,CAAtB;AACD,GAPD,MAOO;AACL;AACA,UAAM;AAAEoB,MAAAA;AAAF,QAAYjB,GAAG,CAACkB,GAAJ,CAAQC,OAA1B;AACA,UAAM;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA+BJ,KAAK,GAAGA,KAAH,GAAW,EAArD;AACAP,IAAAA,OAAO,GAAGO,KAAK,GACX;AACEK,MAAAA,aAAa,EAAG,GAAEF,UAAW,IAAGC,YAAa;AAD/C,KADW,GAIX,EAJJ;AAKA,UAAMP,MAAM,GAAG,MAAMxB,KAAK,CAAC;AACzBY,MAAAA,GADyB;AAEzBa,MAAAA,MAAM,EAAE,KAFiB;AAGzBZ,MAAAA,MAHyB;AAIzBO,MAAAA;AAJyB,KAAD,CAAL,CAKlBa,KALkB,CAKXC,GAAD,IAAS,CAAE,CALC,CAArB;AAMAb,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,QAAIf,IAAI,GAAGiB,MAAM,GAAGA,MAAM,CAACjB,IAAV,GAAiB,EAAlC;AACA,WAAOA,IAAP;AACD;AACF,CAlDD;;AAoDA4B,MAAM,CAACC,OAAP,GAAiB;AACf3B,EAAAA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\n\r\nconst { REPOSITY_URL, USER_REPOSITY_URL, USER_STAR_URL } = require('../config');\r\nconst successInfo = (msg, data) => ({ code: 0, msg, data });\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  let url = '';\r\n  let params = {};\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      let { q, lang, sort, order } = ctx.query;\r\n      params = { q, lang, sort, order };\r\n      url = REPOSITY_URL;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 req，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    const url = '/api' + ctx.asPath;\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    const result = await axios({ url, method: 'get' });\r\n    let data = result ? result.data : [];\r\n    ctx.body = successInfo('客户端代理获取数据成功', data);\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      params,\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}