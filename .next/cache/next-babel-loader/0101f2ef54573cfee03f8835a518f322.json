{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport * as constants from '../constants';\nconst reducers = {\n  // 类似 user: useReducer\n  user: (state = {}, action) => {\n    switch (action.type) {\n      case constants.GET_USER_INFO:\n        return _objectSpread({}, action.payload);\n\n      case constants.USER_LOGIN_OUT:\n        return {};\n\n      default:\n        return state;\n    }\n  },\n  home: (state = {}, action) => {\n    switch (action.type) {\n      case constants.GET_USER_REPOS:\n        return _objectSpread({}, state, {\n          user_repo: action.payload\n        });\n\n      case constants.GET_USER_STARRED_REPOS:\n        return _objectSpread({}, state, {\n          user_starred_repo: action.payload\n        });\n\n      default:\n        return state;\n    }\n  },\n  search: (state = {}, action) => {\n    switch (action.type) {\n      case constants.GET_SEARCH_REPOS:\n        return _objectSpread({}, state, {\n          search_repo: action.payload\n        });\n\n      default:\n        return state;\n    }\n  },\n  detail: (state = {}, action) => {\n    switch (action.type) {\n      case constants.GET_DETAIL_USER_REPOS:\n        return _objectSpread({}, state, {\n          user_repo: action.payload\n        });\n\n      case constants.GET_REPO_README:\n        return _objectSpread({}, state, {\n          repo_readme: action.payload\n        });\n\n      case constants.GET_REPO_ISSUES:\n        return _objectSpread({}, state, {\n          repo_issues: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }\n}; // 中间件\n\nconst middleware = [thunk];\nconst reducer = combineReducers(reducers);\nconst serverInitState = {\n  user: {},\n  home: {\n    user_repo: [],\n    user_starred_repo: []\n  },\n  search: {\n    search_repo: []\n  },\n  detail: {\n    user_repo: [],\n    repo_readme: [],\n    repo_issues: []\n  }\n}; // initState 接受服务端的数据并更新数据\n\nconst initStore = (initState = serverInitState) => createStore(reducer, initState, composeWithDevTools(applyMiddleware(...middleware)));\n\nexport default initStore;","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/reducers/index.tsx"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","constants","reducers","user","state","action","type","GET_USER_INFO","payload","USER_LOGIN_OUT","home","GET_USER_REPOS","user_repo","GET_USER_STARRED_REPOS","user_starred_repo","search","GET_SEARCH_REPOS","search_repo","detail","GET_DETAIL_USER_REPOS","GET_REPO_README","repo_readme","GET_REPO_ISSUES","repo_issues","middleware","reducer","serverInitState","initStore","initState"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AAOA,MAAMC,QAAQ,GAAG;AACf;AACAC,EAAAA,IAAI,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAA2B;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKL,SAAS,CAACM,aAAf;AACE,iCAAYF,MAAM,CAACG,OAAnB;;AACF,WAAKP,SAAS,CAACQ,cAAf;AACE,eAAO,EAAP;;AACF;AACE,eAAOL,KAAP;AANJ;AAQD,GAXc;AAYfM,EAAAA,IAAI,EAAE,CAACN,KAAK,GAAG,EAAT,EAAaC,MAAb,KAA2B;AAC/B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKL,SAAS,CAACU,cAAf;AACE,iCAAYP,KAAZ;AAAmBQ,UAAAA,SAAS,EAAEP,MAAM,CAACG;AAArC;;AACF,WAAKP,SAAS,CAACY,sBAAf;AACE,iCAAYT,KAAZ;AAAmBU,UAAAA,iBAAiB,EAAET,MAAM,CAACG;AAA7C;;AACF;AACE,eAAOJ,KAAP;AANJ;AAQD,GArBc;AAsBfW,EAAAA,MAAM,EAAE,CAACX,KAAK,GAAG,EAAT,EAAaC,MAAb,KAA2B;AACjC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKL,SAAS,CAACe,gBAAf;AACE,iCAAYZ,KAAZ;AAAmBa,UAAAA,WAAW,EAAEZ,MAAM,CAACG;AAAvC;;AACF;AACE,eAAOJ,KAAP;AAJJ;AAMD,GA7Bc;AA8Bfc,EAAAA,MAAM,EAAE,CAACd,KAAK,GAAG,EAAT,EAAaC,MAAb,KAA2B;AACjC,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKL,SAAS,CAACkB,qBAAf;AACE,iCAAYf,KAAZ;AAAmBQ,UAAAA,SAAS,EAAEP,MAAM,CAACG;AAArC;;AACF,WAAKP,SAAS,CAACmB,eAAf;AACE,iCAAYhB,KAAZ;AAAmBiB,UAAAA,WAAW,EAAEhB,MAAM,CAACG;AAAvC;;AACF,WAAKP,SAAS,CAACqB,eAAf;AACE,iCAAYlB,KAAZ;AAAmBmB,UAAAA,WAAW,EAAElB,MAAM,CAACG;AAAvC;;AACF;AACE,eAAOJ,KAAP;AARJ;AAUD;AAzCc,CAAjB,C,CA4CA;;AACA,MAAMoB,UAAU,GAAG,CAACzB,KAAD,CAAnB;AACA,MAAM0B,OAAO,GAAG5B,eAAe,CAACK,QAAD,CAA/B;AAEA,MAAMwB,eAAe,GAAG;AACtBvB,EAAAA,IAAI,EAAE,EADgB;AAEtBO,EAAAA,IAAI,EAAE;AACJE,IAAAA,SAAS,EAAE,EADP;AAEJE,IAAAA,iBAAiB,EAAE;AAFf,GAFgB;AAMtBC,EAAAA,MAAM,EAAE;AACNE,IAAAA,WAAW,EAAE;AADP,GANc;AAStBC,EAAAA,MAAM,EAAE;AACNN,IAAAA,SAAS,EAAE,EADL;AAENS,IAAAA,WAAW,EAAE,EAFP;AAGNE,IAAAA,WAAW,EAAE;AAHP;AATc,CAAxB,C,CAgBA;;AACA,MAAMI,SAAS,GAAG,CAACC,SAAS,GAAGF,eAAb,KAChB9B,WAAW,CACT6B,OADS,EAETG,SAFS,EAGT5B,mBAAmB,CAACF,eAAe,CAAC,GAAG0B,UAAJ,CAAhB,CAHV,CADb;;AAOA,eAAeG,SAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport * as constants from '../constants';\r\n\r\ninterface A {\r\n  type?: string;\r\n  payload?: any;\r\n}\r\n\r\nconst reducers = {\r\n  // 类似 user: useReducer\r\n  user: (state = {}, action: A) => {\r\n    switch (action.type) {\r\n      case constants.GET_USER_INFO:\r\n        return { ...action.payload };\r\n      case constants.USER_LOGIN_OUT:\r\n        return {};\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  home: (state = {}, action: A) => {\r\n    switch (action.type) {\r\n      case constants.GET_USER_REPOS:\r\n        return { ...state, user_repo: action.payload };\r\n      case constants.GET_USER_STARRED_REPOS:\r\n        return { ...state, user_starred_repo: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  search: (state = {}, action: A) => {\r\n    switch (action.type) {\r\n      case constants.GET_SEARCH_REPOS:\r\n        return { ...state, search_repo: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  detail: (state = {}, action: A) => {\r\n    switch (action.type) {\r\n      case constants.GET_DETAIL_USER_REPOS:\r\n        return { ...state, user_repo: action.payload };\r\n      case constants.GET_REPO_README:\r\n        return { ...state, repo_readme: action.payload };\r\n      case constants.GET_REPO_ISSUES:\r\n        return { ...state, repo_issues: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n};\r\n\r\n// 中间件\r\nconst middleware = [thunk];\r\nconst reducer = combineReducers(reducers);\r\n\r\nconst serverInitState = {\r\n  user: {},\r\n  home: {\r\n    user_repo: [],\r\n    user_starred_repo: [],\r\n  },\r\n  search: {\r\n    search_repo: [],\r\n  },\r\n  detail: {\r\n    user_repo: [],\r\n    repo_readme: [],\r\n    repo_issues: [],\r\n  },\r\n};\r\n\r\n// initState 接受服务端的数据并更新数据\r\nconst initStore = (initState = serverInitState) =>\r\n  createStore(\r\n    reducer,\r\n    initState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n  );\r\n\r\nexport default initStore;\r\n"]},"metadata":{},"sourceType":"module"}