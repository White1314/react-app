{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar _require = require('../config'),\n    SEARCH_REPOSITY_URL = _require.SEARCH_REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL,\n    REPOSITY_DETAIL_URL = _require.REPOSITY_DETAIL_URL;\n\nvar _require2 = require('../utils'),\n    getParamsToPath = _require2.getParamsToPath;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, isServer, headers, _path, result, data, oauth, _ref, token_type, access_token, _result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // 根据客户端请求的 path 匹配对应的 github api url\n          url = '';\n          console.log(getParamsToPath(ctx.query));\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/user/repos' ? 5 : _context.t0 === '/api/user/starred' ? 7 : _context.t0 === '/api/search' ? 9 : _context.t0 === '/api/detail' ? 10 : 10;\n          break;\n\n        case 5:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 12);\n\n        case 7:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 12);\n\n        case 9:\n          url = SEARCH_REPOSITY_URL + getParamsToPath(ctx.query);\n\n        case 10:\n          url = REPOSITY_DETAIL_URL + getParamsToPath(ctx.query);\n          return _context.abrupt(\"break\", 12);\n\n        case 12:\n          // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n          isServer = false;\n          headers = {}; // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 25;\n            break;\n          }\n\n          console.log(ctx); // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n          _path = '/api' + ctx.asPath;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(axios({\n            url: _path,\n            method: 'get'\n          }));\n\n        case 19:\n          result = _context.sent;\n          console.log(result);\n          data = result.data.code === 0 ? result.data.data : [];\n          return _context.abrupt(\"return\", data);\n\n        case 25:\n          // 服务端可直接获取 ctx\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 30;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 30:\n          _result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = _result ? _result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","SEARCH_REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","REPOSITY_DETAIL_URL","getParamsToPath","getApiData","ctx","path","url","console","log","query","isServer","headers","asPath","method","result","data","code","oauth","req","session","token_type","access_token","Authorization","err","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eAOIA,OAAO,CAAC,WAAD,C;IAJTC,mB,YAAAA,mB;IACAC,iB,YAAAA,iB;IACAC,a,YAAAA,a;IACAC,mB,YAAAA,mB;;gBAE0BJ,OAAO,CAAC,UAAD,C;IAA3BK,e,aAAAA,e;;AAER,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjB;AACIC,UAAAA,GAFa,GAEP,EAFO;AAGjBC,UAAAA,OAAO,CAACC,GAAR,CAAYN,eAAe,CAACE,GAAG,CAACK,KAAL,CAA3B;AAHiB,wBAITJ,IAJS;AAAA,0CAKV,iBALU,uBAQV,mBARU,uBAWV,aAXU,uBAaV,aAbU;AAAA;;AAAA;AAMbC,UAAAA,GAAG,GAAGP,iBAAN;AANa;;AAAA;AASbO,UAAAA,GAAG,GAAGN,aAAN;AATa;;AAAA;AAYbM,UAAAA,GAAG,GAAGR,mBAAmB,GAAGI,eAAe,CAACE,GAAG,CAACK,KAAL,CAA3C;;AAZa;AAebH,UAAAA,GAAG,GAAGL,mBAAmB,GAAGC,eAAe,CAACE,GAAG,CAACK,KAAL,CAA3C;AAfa;;AAAA;AAmBjB;AACIC,UAAAA,QApBa;AAqBbC,UAAAA,OArBa,GAqBH,EArBG,EAuBjB;;AAvBiB,cAwBZD,QAxBY;AAAA;AAAA;AAAA;;AAyBfH,UAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAzBe,CA0Bf;;AACIC,UAAAA,KA3BW,GA2BJ,SAASD,GAAG,CAACQ,MA3BT;AAAA;AAAA,2CA4BMhB,KAAK,CAAC;AAAEU,YAAAA,GAAG,EAAED,KAAP;AAAaQ,YAAAA,MAAM,EAAE;AAArB,WAAD,CA5BX;;AAAA;AA4BTC,UAAAA,MA5BS;AA6BfP,UAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACIC,UAAAA,IA9BW,GA8BJD,MAAM,CAACC,IAAP,CAAYC,IAAZ,KAAqB,CAArB,GAAyBF,MAAM,CAACC,IAAP,CAAYA,IAArC,GAA4C,EA9BxC;AAAA,2CA+BRA,IA/BQ;;AAAA;AAiCf;AACQE,UAAAA,KAlCO,GAkCGb,GAAG,CAACc,GAAJ,CAAQC,OAlCX,CAkCPF,KAlCO;AAAA,iBAmCsBA,KAAK,GAAGA,KAAH,GAAW,EAnCtC,EAmCPG,UAnCO,QAmCPA,UAnCO,EAmCKC,YAnCL,QAmCKA,YAnCL;AAoCfV,UAAAA,OAAO,GAAGM,KAAK,GACX;AACEK,YAAAA,aAAa,YAAKF,UAAL,cAAmBC,YAAnB;AADf,WADW,GAIX,EAJJ;AApCe;AAAA,2CAyCMzB,KAAK,CAAC;AACzBU,YAAAA,GAAG,EAAHA,GADyB;AAEzBO,YAAAA,MAAM,EAAE,KAFiB;AAGzBF,YAAAA,OAAO,EAAPA;AAHyB,WAAD,CAAL,UAIZ,UAACY,GAAD,EAAS,CAAE,CAJC,CAzCN;;AAAA;AAyCTT,UAAAA,OAzCS;AA8CfP,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACIO,UAAAA,KA/CW,GA+CJD,OAAM,GAAGA,OAAM,CAACC,IAAV,GAAiB,EA/CnB;AAAA,2CAgDRA,KAhDQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAoDAS,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\n\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\nconst { getParamsToPath } = require('../utils');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  let url = '';\r\n  console.log(getParamsToPath(ctx.query));\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      url = SEARCH_REPOSITY_URL + getParamsToPath(ctx.query);\r\n    case '/api/detail':\r\n    default:\r\n      url = REPOSITY_DETAIL_URL + getParamsToPath(ctx.query);\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    let path = '/api' + ctx.asPath;\r\n    const result = await axios({ url: path, method: 'get' });\r\n    console.log(result);\r\n    let data = result.data.code === 0 ? result.data.data : [];\r\n    return data;\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}