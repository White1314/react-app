{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar _require = require('../config'),\n    REPOSITY_URL = _require.REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, oauth, _ref, token_type, access_token, headers, result;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = ''; // 根据客户端请求的 path 匹配对应的 github api url\n\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/repository' ? 4 : _context.t0 === '/api/user/repos' ? 6 : _context.t0 === '/api/user/starred' ? 8 : 10;\n          break;\n\n        case 4:\n          url = REPOSITY_URL;\n          return _context.abrupt(\"break\", 11);\n\n        case 6:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 11);\n\n        case 8:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 11);\n\n        case 10:\n          return _context.abrupt(\"break\", 11);\n\n        case 11:\n          // 获取 session 里的 token\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 16:\n          result = _context.sent;\n          console.log(result);\n          result = result ? result.data : {};\n          return _context.abrupt(\"return\", result);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","getApiData","ctx","path","url","oauth","req","session","token_type","access_token","headers","Authorization","method","err","result","console","log","data","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eAC2DA,OAAO,CAAC,WAAD,C;IAA1DC,Y,YAAAA,Y;IAAcC,iB,YAAAA,iB;IAAmBC,a,YAAAA,a;;AAEzC,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,GADa,GACP,EADO,EAEjB;;AAFiB,wBAGTD,IAHS;AAAA,0CAIV,iBAJU,uBAOV,iBAPU,uBAUV,mBAVU;AAAA;;AAAA;AAKbC,UAAAA,GAAG,GAAGN,YAAN;AALa;;AAAA;AAQbM,UAAAA,GAAG,GAAGL,iBAAN;AARa;;AAAA;AAWbK,UAAAA,GAAG,GAAGJ,aAAN;AAXa;;AAAA;AAAA;;AAAA;AAgBjB;AACQK,UAAAA,KAjBS,GAiBCH,GAAG,CAACI,GAAJ,CAAQC,OAjBT,CAiBTF,KAjBS;AAAA,iBAkBoBA,KAAK,GAAGA,KAAH,GAAW,EAlBpC,EAkBTG,UAlBS,QAkBTA,UAlBS,EAkBGC,YAlBH,QAkBGA,YAlBH;AAmBXC,UAAAA,OAnBW,GAmBDL,KAAK,GACjB;AACEM,YAAAA,aAAa,YAAKH,UAAL,cAAmBC,YAAnB;AADf,WADiB,GAIjB,EAvBa;AAAA;AAAA,2CAwBEb,KAAK,CAAC;AACvBQ,YAAAA,GAAG,EAAHA,GADuB;AAEvBQ,YAAAA,MAAM,EAAE,KAFe;AAGvBF,YAAAA,OAAO,EAAPA;AAHuB,WAAD,CAAL,UAIV,UAACG,GAAD,EAAS,CAAE,CAJD,CAxBF;;AAAA;AAwBbC,UAAAA,MAxBa;AA6BjBC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAA,UAAAA,MAAM,GAAGA,MAAM,GAAGA,MAAM,CAACG,IAAV,GAAiB,EAAhC;AA9BiB,2CA+BVH,MA/BU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAkCAI,MAAM,CAACC,OAAP,GAAiB;AACflB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\nconst { REPOSITY_URL, USER_REPOSITY_URL, USER_STAR_URL } = require('../config');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  let url = '';\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  switch (path) {\r\n    case '/api/repository':\r\n      url = REPOSITY_URL;\r\n      break;\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  // 获取 session 里的 token\r\n  const { oauth } = ctx.req.session;\r\n  const { token_type, access_token } = oauth ? oauth : {};\r\n  const headers = oauth\r\n    ? {\r\n        Authorization: `${token_type} ${access_token}`,\r\n      }\r\n    : {};\r\n  let result = await axios({\r\n    url,\r\n    method: 'get',\r\n    headers,\r\n  }).catch((err) => {});\r\n  console.log(result);\r\n  result = result ? result.data : {};\r\n  return result;\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}