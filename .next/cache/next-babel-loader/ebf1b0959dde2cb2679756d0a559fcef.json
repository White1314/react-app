{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar _require = require('../config'),\n    SEARCH_REPOSITY_URL = _require.SEARCH_REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL,\n    REPOSITY_DETAIL_URL = _require.REPOSITY_DETAIL_URL;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, isServer, headers, _path, result, data, oauth, _ref, token_type, access_token, _result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // 根据客户端请求的 path 匹配对应的 github api url\n          url = '';\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/user/repos' ? 4 : _context.t0 === '/api/user/starred' ? 6 : _context.t0 === '/api/search' ? 8 : _context.t0 === '/api/detail' ? 10 : 12;\n          break;\n\n        case 4:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 13);\n\n        case 6:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 13);\n\n        case 8:\n          url = SEARCH_REPOSITY_URL + asPath;\n          return _context.abrupt(\"break\", 13);\n\n        case 10:\n          url = REPOSITY_DETAIL_URL + asPath;\n          return _context.abrupt(\"break\", 13);\n\n        case 12:\n          return _context.abrupt(\"break\", 13);\n\n        case 13:\n          // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n          isServer = false;\n          headers = {}; // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 26;\n            break;\n          }\n\n          console.log(ctx); // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n          _path = '/api' + ctx.asPath;\n          _context.next = 20;\n          return _regeneratorRuntime.awrap(axios({\n            url: _path,\n            method: 'get'\n          }));\n\n        case 20:\n          result = _context.sent;\n          console.log(result);\n          data = result.data.code === 0 ? result.data.data : [];\n          return _context.abrupt(\"return\", data);\n\n        case 26:\n          // 服务端可直接获取 ctx\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 31;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 31:\n          _result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = _result ? _result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 35:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","SEARCH_REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","REPOSITY_DETAIL_URL","getApiData","ctx","path","url","asPath","isServer","headers","console","log","method","result","data","code","oauth","req","session","token_type","access_token","Authorization","err","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eAOIA,OAAO,CAAC,WAAD,C;IAJTC,mB,YAAAA,mB;IACAC,iB,YAAAA,iB;IACAC,a,YAAAA,a;IACAC,mB,YAAAA,mB;;AAGF,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjB;AACIC,UAAAA,GAFa,GAEP,EAFO;AAAA,wBAGTD,IAHS;AAAA,0CAIV,iBAJU,uBAOV,mBAPU,uBAUV,aAVU,uBAaV,aAbU;AAAA;;AAAA;AAKbC,UAAAA,GAAG,GAAGN,iBAAN;AALa;;AAAA;AAQbM,UAAAA,GAAG,GAAGL,aAAN;AARa;;AAAA;AAWbK,UAAAA,GAAG,GAAGP,mBAAmB,GAAGQ,MAA5B;AAXa;;AAAA;AAcbD,UAAAA,GAAG,GAAGJ,mBAAmB,GAAGK,MAA5B;AAda;;AAAA;AAAA;;AAAA;AAoBjB;AACIC,UAAAA,QArBa;AAsBbC,UAAAA,OAtBa,GAsBH,EAtBG,EAwBjB;;AAxBiB,cAyBZD,QAzBY;AAAA;AAAA;AAAA;;AA0BfE,UAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ,EA1Be,CA2Bf;;AACIC,UAAAA,KA5BW,GA4BJ,SAASD,GAAG,CAACG,MA5BT;AAAA;AAAA,2CA6BMV,KAAK,CAAC;AAAES,YAAAA,GAAG,EAAED,KAAP;AAAaO,YAAAA,MAAM,EAAE;AAArB,WAAD,CA7BX;;AAAA;AA6BTC,UAAAA,MA7BS;AA8BfH,UAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACIC,UAAAA,IA/BW,GA+BJD,MAAM,CAACC,IAAP,CAAYC,IAAZ,KAAqB,CAArB,GAAyBF,MAAM,CAACC,IAAP,CAAYA,IAArC,GAA4C,EA/BxC;AAAA,2CAgCRA,IAhCQ;;AAAA;AAkCf;AACQE,UAAAA,KAnCO,GAmCGZ,GAAG,CAACa,GAAJ,CAAQC,OAnCX,CAmCPF,KAnCO;AAAA,iBAoCsBA,KAAK,GAAGA,KAAH,GAAW,EApCtC,EAoCPG,UApCO,QAoCPA,UApCO,EAoCKC,YApCL,QAoCKA,YApCL;AAqCfX,UAAAA,OAAO,GAAGO,KAAK,GACX;AACEK,YAAAA,aAAa,YAAKF,UAAL,cAAmBC,YAAnB;AADf,WADW,GAIX,EAJJ;AArCe;AAAA,2CA0CMvB,KAAK,CAAC;AACzBS,YAAAA,GAAG,EAAHA,GADyB;AAEzBM,YAAAA,MAAM,EAAE,KAFiB;AAGzBH,YAAAA,OAAO,EAAPA;AAHyB,WAAD,CAAL,UAIZ,UAACa,GAAD,EAAS,CAAE,CAJC,CA1CN;;AAAA;AA0CTT,UAAAA,OA1CS;AA+CfH,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACIG,UAAAA,KAhDW,GAgDJD,OAAM,GAAGA,OAAM,CAACC,IAAV,GAAiB,EAhDnB;AAAA,2CAiDRA,KAjDQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAqDAS,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\n\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  let url = '';\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      url = SEARCH_REPOSITY_URL + asPath;\r\n      break;\r\n    case '/api/detail':\r\n      url = REPOSITY_DETAIL_URL + asPath;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    let path = '/api' + ctx.asPath;\r\n    const result = await axios({ url: path, method: 'get' });\r\n    console.log(result);\r\n    let data = result.data.code === 0 ? result.data.data : [];\r\n    return data;\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}