{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar _require = require('../config'),\n    SEARCH_REPOSITY_URL = _require.SEARCH_REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL,\n    REPOSITY_DETAIL_URL = _require.REPOSITY_DETAIL_URL;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, asPath, isServer, headers, _path, result, data, oauth, _ref, token_type, access_token, _result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // 根据客户端请求的 path 匹配对应的 github api url\n          url = '';\n          asPath = ctx.asPath;\n          asPath = asPath.replace(/\\.*\\?/g, '');\n          console.log(asPath);\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/user/repos' ? 7 : _context.t0 === '/api/user/starred' ? 9 : _context.t0 === '/api/search' ? 11 : _context.t0 === '/api/detail' ? 13 : 15;\n          break;\n\n        case 7:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 16);\n\n        case 9:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 16);\n\n        case 11:\n          url = SEARCH_REPOSITY_URL + \"?\" + asPath;\n          return _context.abrupt(\"break\", 16);\n\n        case 13:\n          url = REPOSITY_DETAIL_URL;\n          return _context.abrupt(\"break\", 16);\n\n        case 15:\n          return _context.abrupt(\"break\", 16);\n\n        case 16:\n          // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n          isServer = false;\n          headers = {}; // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 29;\n            break;\n          }\n\n          console.log(ctx); // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n          _path = '/api' + ctx.asPath;\n          _context.next = 23;\n          return _regeneratorRuntime.awrap(axios({\n            url: _path,\n            method: 'get'\n          }));\n\n        case 23:\n          result = _context.sent;\n          console.log(result);\n          data = result.data.code === 0 ? result.data.data : [];\n          return _context.abrupt(\"return\", data);\n\n        case 29:\n          // 服务端可直接获取 ctx\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 34;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 34:\n          _result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = _result ? _result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","SEARCH_REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","REPOSITY_DETAIL_URL","getApiData","ctx","path","url","asPath","replace","console","log","isServer","headers","method","result","data","code","oauth","req","session","token_type","access_token","Authorization","err","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eAOIA,OAAO,CAAC,WAAD,C;IAJTC,mB,YAAAA,mB;IACAC,iB,YAAAA,iB;IACAC,a,YAAAA,a;IACAC,mB,YAAAA,mB;;AAGF,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjB;AACIC,UAAAA,GAFa,GAEP,EAFO;AAGXC,UAAAA,MAHW,GAGAH,GAHA,CAGXG,MAHW;AAIjBA,UAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAAT;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AALiB,wBAMTF,IANS;AAAA,0CAOV,iBAPU,uBAUV,mBAVU,uBAaV,aAbU,wBAgBV,aAhBU;AAAA;;AAAA;AAQbC,UAAAA,GAAG,GAAGN,iBAAN;AARa;;AAAA;AAWbM,UAAAA,GAAG,GAAGL,aAAN;AAXa;;AAAA;AAcbK,UAAAA,GAAG,GAAGP,mBAAmB,MAAnB,GAA4BQ,MAAlC;AAda;;AAAA;AAiBbD,UAAAA,GAAG,GAAGJ,mBAAN;AAjBa;;AAAA;AAAA;;AAAA;AAuBjB;AACIS,UAAAA,QAxBa;AAyBbC,UAAAA,OAzBa,GAyBH,EAzBG,EA2BjB;;AA3BiB,cA4BZD,QA5BY;AAAA;AAAA;AAAA;;AA6BfF,UAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ,EA7Be,CA8Bf;;AACIC,UAAAA,KA/BW,GA+BJ,SAASD,GAAG,CAACG,MA/BT;AAAA;AAAA,2CAgCMV,KAAK,CAAC;AAAES,YAAAA,GAAG,EAAED,KAAP;AAAaQ,YAAAA,MAAM,EAAE;AAArB,WAAD,CAhCX;;AAAA;AAgCTC,UAAAA,MAhCS;AAiCfL,UAAAA,OAAO,CAACC,GAAR,CAAYI,MAAZ;AACIC,UAAAA,IAlCW,GAkCJD,MAAM,CAACC,IAAP,CAAYC,IAAZ,KAAqB,CAArB,GAAyBF,MAAM,CAACC,IAAP,CAAYA,IAArC,GAA4C,EAlCxC;AAAA,2CAmCRA,IAnCQ;;AAAA;AAqCf;AACQE,UAAAA,KAtCO,GAsCGb,GAAG,CAACc,GAAJ,CAAQC,OAtCX,CAsCPF,KAtCO;AAAA,iBAuCsBA,KAAK,GAAGA,KAAH,GAAW,EAvCtC,EAuCPG,UAvCO,QAuCPA,UAvCO,EAuCKC,YAvCL,QAuCKA,YAvCL;AAwCfT,UAAAA,OAAO,GAAGK,KAAK,GACX;AACEK,YAAAA,aAAa,YAAKF,UAAL,cAAmBC,YAAnB;AADf,WADW,GAIX,EAJJ;AAxCe;AAAA,2CA6CMxB,KAAK,CAAC;AACzBS,YAAAA,GAAG,EAAHA,GADyB;AAEzBO,YAAAA,MAAM,EAAE,KAFiB;AAGzBD,YAAAA,OAAO,EAAPA;AAHyB,WAAD,CAAL,UAIZ,UAACW,GAAD,EAAS,CAAE,CAJC,CA7CN;;AAAA;AA6CTT,UAAAA,OA7CS;AAkDfL,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACIK,UAAAA,KAnDW,GAmDJD,OAAM,GAAGA,OAAM,CAACC,IAAV,GAAiB,EAnDnB;AAAA,2CAoDRA,KApDQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAwDAS,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\n\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n  REPOSITY_DETAIL_URL,\r\n} = require('../config');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  let url = '';\r\n  let { asPath } = ctx;\r\n  asPath = asPath.replace(/\\.*\\?/g, '');\r\n  console.log(asPath);\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      url = SEARCH_REPOSITY_URL + `?` + asPath;\r\n      break;\r\n    case '/api/detail':\r\n      url = REPOSITY_DETAIL_URL;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    let path = '/api' + ctx.asPath;\r\n    const result = await axios({ url: path, method: 'get' });\r\n    console.log(result);\r\n    let data = result.data.code === 0 ? result.data.data : [];\r\n    return data;\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}