{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nexport const getLastUpdated = time => {\n  return moment(time).fromNow();\n};\n\nconst setParamsToPath = params => {\n  let {\n    q,\n    lang,\n    sort,\n    order\n  } = params;\n  q = q ? `?q=${q}` : '';\n  lang = lang ? `&lang=${lang}` : '';\n  sort = sort ? `&sort=${sort}` : '';\n  order = order ? `&order=${order}` : '';\n  let path = `/search${q}${lang}${sort}${order}`;\n  return path;\n};\n\nexport const getLanguageLink = (item, query) => {\n  let params = _objectSpread({}, query, {}, {\n    lang: item\n  });\n\n  return setParamsToPath(params);\n};\nexport const getSortTypesLink = (item, query) => {\n  let params = _objectSpread({}, query, {}, {\n    sort: item.value,\n    order: item.order\n  });\n\n  return setParamsToPath(params);\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/utils/index.tsx"],"names":["moment","getLastUpdated","time","fromNow","setParamsToPath","params","q","lang","sort","order","path","getLanguageLink","item","query","getSortTypesLink","value"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAGA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAe;AAC3C,SAAOF,MAAM,CAACE,IAAD,CAAN,CAAaC,OAAb,EAAP;AACD,CAFM;;AAIP,MAAMC,eAAe,GAAIC,MAAD,IAAiB;AACvC,MAAI;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,IAAL;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA;AAAjB,MAA2BJ,MAA/B;AACAC,EAAAA,CAAC,GAAGA,CAAC,GAAI,MAAKA,CAAE,EAAX,GAAe,EAApB;AACAC,EAAAA,IAAI,GAAGA,IAAI,GAAI,SAAQA,IAAK,EAAjB,GAAqB,EAAhC;AACAC,EAAAA,IAAI,GAAGA,IAAI,GAAI,SAAQA,IAAK,EAAjB,GAAqB,EAAhC;AACAC,EAAAA,KAAK,GAAGA,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAApC;AACA,MAAIC,IAAI,GAAI,UAASJ,CAAE,GAAEC,IAAK,GAAEC,IAAK,GAAEC,KAAM,EAA7C;AACA,SAAOC,IAAP;AACD,CARD;;AAiBA,OAAO,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAeC,KAAf,KAA4B;AACzD,MAAIR,MAAM,qBAAQQ,KAAR,MAAkB;AAAEN,IAAAA,IAAI,EAAEK;AAAR,GAAlB,CAAV;;AACA,SAAOR,eAAe,CAACC,MAAD,CAAtB;AACD,CAHM;AAUP,OAAO,MAAMS,gBAAgB,GAAG,CAACF,IAAD,EAAUC,KAAV,KAAuB;AACrD,MAAIR,MAAM,qBAAQQ,KAAR,MAAkB;AAAEL,IAAAA,IAAI,EAAEI,IAAI,CAACG,KAAb;AAAoBN,IAAAA,KAAK,EAAEG,IAAI,CAACH;AAAhC,GAAlB,CAAV;;AACA,SAAOL,eAAe,CAACC,MAAD,CAAtB;AACD,CAHM","sourcesContent":["import moment from 'moment';\r\nimport { string } from 'prop-types';\r\n\r\nexport const getLastUpdated = (time: any) => {\r\n  return moment(time).fromNow();\r\n};\r\n\r\nconst setParamsToPath = (params: any) => {\r\n  let { q, lang, sort, order } = params;\r\n  q = q ? `?q=${q}` : '';\r\n  lang = lang ? `&lang=${lang}` : '';\r\n  sort = sort ? `&sort=${sort}` : '';\r\n  order = order ? `&order=${order}` : '';\r\n  let path = `/search${q}${lang}${sort}${order}`;\r\n  return path;\r\n};\r\n\r\ninterface Q {\r\n  q: string;\r\n  lang: string;\r\n  sort: string;\r\n  order: string;\r\n}\r\n\r\nexport const getLanguageLink = (item: string, query: Q) => {\r\n  let params = { ...query, ...{ lang: item } };\r\n  return setParamsToPath(params);\r\n};\r\n\r\ninterface I {\r\n  value: string;\r\n  order: string;\r\n}\r\n\r\nexport const getSortTypesLink = (item: I, query: Q) => {\r\n  let params = { ...query, ...{ sort: item.value, order: item.order } };\r\n  return setParamsToPath(params);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}