{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport moment from 'moment';\nexport const getLastUpdated = time => {\n  return moment(time).fromNow();\n};\n\nconst setParamsToPath = query => {\n  let {\n    q,\n    lang,\n    sort,\n    order,\n    page\n  } = query;\n  q = q ? `?q=${q}` : '';\n  lang = lang ? `&lang=${lang}` : '';\n  sort = sort ? `&sort=${sort}` : '';\n  order = order ? `&order=${order}` : '';\n  page = page ? `&page=${page}` : '';\n  let path = `/search${q}${lang}${sort}${order}${page}`;\n  return path;\n};\n\nexport const getLink = (item, query) => {\n  let params = {};\n\n  if (typeof item === 'string') {\n    // 语言\n    params = _objectSpread({}, query, {}, {\n      lang: item\n    });\n  } else if (typeof item === 'number') {\n    // 分页\n    params = _objectSpread({}, query, {}, {\n      page: item\n    });\n  } else {\n    // 排序\n    params = _objectSpread({}, query, {}, {\n      sort: item.value,\n      order: item.order\n    });\n  }\n\n  return setParamsToPath(params);\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/utils/index.tsx"],"names":["moment","getLastUpdated","time","fromNow","setParamsToPath","query","q","lang","sort","order","page","path","getLink","item","params","value"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAe;AAC3C,SAAOF,MAAM,CAACE,IAAD,CAAN,CAAaC,OAAb,EAAP;AACD,CAFM;;AAIP,MAAMC,eAAe,GAAIC,KAAD,IAAgB;AACtC,MAAI;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,IAAL;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB,MAAiCL,KAArC;AACAC,EAAAA,CAAC,GAAGA,CAAC,GAAI,MAAKA,CAAE,EAAX,GAAe,EAApB;AACAC,EAAAA,IAAI,GAAGA,IAAI,GAAI,SAAQA,IAAK,EAAjB,GAAqB,EAAhC;AACAC,EAAAA,IAAI,GAAGA,IAAI,GAAI,SAAQA,IAAK,EAAjB,GAAqB,EAAhC;AACAC,EAAAA,KAAK,GAAGA,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB,EAApC;AACAC,EAAAA,IAAI,GAAGA,IAAI,GAAI,SAAQA,IAAK,EAAjB,GAAqB,EAAhC;AACA,MAAIC,IAAI,GAAI,UAASL,CAAE,GAAEC,IAAK,GAAEC,IAAK,GAAEC,KAAM,GAAEC,IAAK,EAApD;AACA,SAAOC,IAAP;AACD,CATD;;AAuBA,OAAO,MAAMC,OAAO,GAAG,CAACC,IAAD,EAA4BR,KAA5B,KAAyC;AAC9D,MAAIS,MAAM,GAAG,EAAb;;AACA,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACAC,IAAAA,MAAM,qBAAQT,KAAR,MAAkB;AAAEE,MAAAA,IAAI,EAAEM;AAAR,KAAlB,CAAN;AACD,GAHD,MAGO,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AACnC;AACAC,IAAAA,MAAM,qBAAQT,KAAR,MAAkB;AAAEK,MAAAA,IAAI,EAAEG;AAAR,KAAlB,CAAN;AACD,GAHM,MAGA;AACL;AACAC,IAAAA,MAAM,qBAAQT,KAAR,MAAkB;AAAEG,MAAAA,IAAI,EAAEK,IAAI,CAACE,KAAb;AAAoBN,MAAAA,KAAK,EAAEI,IAAI,CAACJ;AAAhC,KAAlB,CAAN;AACD;;AACD,SAAOL,eAAe,CAACU,MAAD,CAAtB;AACD,CAbM","sourcesContent":["import moment from 'moment';\r\n\r\nexport const getLastUpdated = (time: any) => {\r\n  return moment(time).fromNow();\r\n};\r\n\r\nconst setParamsToPath = (query: any) => {\r\n  let { q, lang, sort, order, page } = query;\r\n  q = q ? `?q=${q}` : '';\r\n  lang = lang ? `&lang=${lang}` : '';\r\n  sort = sort ? `&sort=${sort}` : '';\r\n  order = order ? `&order=${order}` : '';\r\n  page = page ? `&page=${page}` : '';\r\n  let path = `/search${q}${lang}${sort}${order}${page}`;\r\n  return path;\r\n};\r\n\r\ninterface I {\r\n  value: string;\r\n  order: string;\r\n}\r\n\r\ninterface Q {\r\n  q: string;\r\n  lang: string;\r\n  sort: string;\r\n  order: string;\r\n}\r\n\r\nexport const getLink = (item: string | I | number, query: Q) => {\r\n  let params = {};\r\n  if (typeof item === 'string') {\r\n    // 语言\r\n    params = { ...query, ...{ lang: item } };\r\n  } else if (typeof item === 'number') {\r\n    // 分页\r\n    params = { ...query, ...{ page: item } };\r\n  } else {\r\n    // 排序\r\n    params = { ...query, ...{ sort: item.value, order: item.order } };\r\n  }\r\n  return setParamsToPath(params);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}