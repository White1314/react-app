{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar axios = require('axios');\n\nvar _require = require('../config'),\n    SEARCH_REPOSITY_URL = _require.SEARCH_REPOSITY_URL,\n    USER_REPOSITY_URL = _require.USER_REPOSITY_URL,\n    USER_STAR_URL = _require.USER_STAR_URL;\n\nvar getApiData = function getApiData(ctx, path) {\n  var url, _ctx$query, q, lang, sort, order, isServer, headers, _path, result, data, oauth, _ref, token_type, access_token, _result, _data;\n\n  return _regeneratorRuntime.async(function getApiData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = ''; // 根据客户端请求的 path 匹配对应的 github api url\n\n          _context.t0 = path;\n          _context.next = _context.t0 === '/api/user/repos' ? 4 : _context.t0 === '/api/user/starred' ? 6 : _context.t0 === '/api/search' ? 8 : _context.t0 === '/api/detail' ? 11 : 11;\n          break;\n\n        case 4:\n          url = USER_REPOSITY_URL;\n          return _context.abrupt(\"break\", 12);\n\n        case 6:\n          url = USER_STAR_URL;\n          return _context.abrupt(\"break\", 12);\n\n        case 8:\n          _ctx$query = ctx.query, q = _ctx$query.q, lang = _ctx$query.lang, sort = _ctx$query.sort, order = _ctx$query.order;\n          params = {\n            q: q,\n            lang: lang,\n            sort: sort,\n            order: order\n          };\n          url = \"\".concat(SEARCH_REPOSITY_URL, \"?q=\").concat(q, \"&lang=\").concat(lang, \"&sort=\").concat(sort, \"&order=\").concat(order);\n\n        case 11:\n          return _context.abrupt(\"break\", 12);\n\n        case 12:\n          // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\n          isServer = false;\n          headers = {}; // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\n\n          if (isServer) {\n            _context.next = 25;\n            break;\n          }\n\n          console.log(ctx); // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\n\n          _path = '/api' + ctx.asPath;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(axios({\n            url: _path,\n            method: 'get'\n          }));\n\n        case 19:\n          result = _context.sent;\n          console.log(result);\n          data = result.data.code === 0 ? result.data.data : [];\n          return _context.abrupt(\"return\", data);\n\n        case 25:\n          // 服务端可直接获取 ctx\n          oauth = ctx.req.session.oauth;\n          _ref = oauth ? oauth : {}, token_type = _ref.token_type, access_token = _ref.access_token;\n          headers = oauth ? {\n            Authorization: \"\".concat(token_type, \" \").concat(access_token)\n          } : {};\n          _context.next = 30;\n          return _regeneratorRuntime.awrap(axios({\n            url: url,\n            method: 'get',\n            headers: headers\n          })[\"catch\"](function (err) {}));\n\n        case 30:\n          _result = _context.sent;\n          console.log('服务端获取数据成功');\n          _data = _result ? _result.data : [];\n          return _context.abrupt(\"return\", _data);\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nmodule.exports = {\n  getApiData: getApiData\n};","map":{"version":3,"sources":["D:/360Downloads/Vscode/program/Next-Github-App/server/utils.js"],"names":["axios","require","SEARCH_REPOSITY_URL","USER_REPOSITY_URL","USER_STAR_URL","getApiData","ctx","path","url","query","q","lang","sort","order","params","isServer","headers","console","log","asPath","method","result","data","code","oauth","req","session","token_type","access_token","Authorization","err","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;eAMIA,OAAO,CAAC,WAAD,C;IAHTC,mB,YAAAA,mB;IACAC,iB,YAAAA,iB;IACAC,a,YAAAA,a;;AAGF,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAOC,GAAP,EAAYC,IAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,UAAAA,GADa,GACP,EADO,EAEjB;;AAFiB,wBAGTD,IAHS;AAAA,0CAIV,iBAJU,uBAOV,mBAPU,uBAUV,aAVU,uBAcV,aAdU;AAAA;;AAAA;AAKbC,UAAAA,GAAG,GAAGL,iBAAN;AALa;;AAAA;AAQbK,UAAAA,GAAG,GAAGJ,aAAN;AARa;;AAAA;AAAA,uBAWkBE,GAAG,CAACG,KAXtB,EAWPC,CAXO,cAWPA,CAXO,EAWJC,IAXI,cAWJA,IAXI,EAWEC,IAXF,cAWEA,IAXF,EAWQC,KAXR,cAWQA,KAXR;AAYbC,UAAAA,MAAM,GAAG;AAAEJ,YAAAA,CAAC,EAADA,CAAF;AAAKC,YAAAA,IAAI,EAAJA,IAAL;AAAWC,YAAAA,IAAI,EAAJA,IAAX;AAAiBC,YAAAA,KAAK,EAALA;AAAjB,WAAT;AACAL,UAAAA,GAAG,aAAMN,mBAAN,gBAA+BQ,CAA/B,mBAAyCC,IAAzC,mBAAsDC,IAAtD,oBAAoEC,KAApE,CAAH;;AAba;AAAA;;AAAA;AAmBjB;AACIE,UAAAA,QApBa;AAqBbC,UAAAA,OArBa,GAqBH,EArBG,EAuBjB;;AAvBiB,cAwBZD,QAxBY;AAAA;AAAA;AAAA;;AAyBfE,UAAAA,OAAO,CAACC,GAAR,CAAYZ,GAAZ,EAzBe,CA0Bf;;AACIC,UAAAA,KA3BW,GA2BJ,SAASD,GAAG,CAACa,MA3BT;AAAA;AAAA,2CA4BMnB,KAAK,CAAC;AAAEQ,YAAAA,GAAG,EAAED,KAAP;AAAaa,YAAAA,MAAM,EAAE;AAArB,WAAD,CA5BX;;AAAA;AA4BTC,UAAAA,MA5BS;AA6BfJ,UAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACIC,UAAAA,IA9BW,GA8BJD,MAAM,CAACC,IAAP,CAAYC,IAAZ,KAAqB,CAArB,GAAyBF,MAAM,CAACC,IAAP,CAAYA,IAArC,GAA4C,EA9BxC;AAAA,2CA+BRA,IA/BQ;;AAAA;AAiCf;AACQE,UAAAA,KAlCO,GAkCGlB,GAAG,CAACmB,GAAJ,CAAQC,OAlCX,CAkCPF,KAlCO;AAAA,iBAmCsBA,KAAK,GAAGA,KAAH,GAAW,EAnCtC,EAmCPG,UAnCO,QAmCPA,UAnCO,EAmCKC,YAnCL,QAmCKA,YAnCL;AAoCfZ,UAAAA,OAAO,GAAGQ,KAAK,GACX;AACEK,YAAAA,aAAa,YAAKF,UAAL,cAAmBC,YAAnB;AADf,WADW,GAIX,EAJJ;AApCe;AAAA,2CAyCM5B,KAAK,CAAC;AACzBQ,YAAAA,GAAG,EAAHA,GADyB;AAEzBY,YAAAA,MAAM,EAAE,KAFiB;AAGzBJ,YAAAA,OAAO,EAAPA;AAHyB,WAAD,CAAL,UAIZ,UAACc,GAAD,EAAS,CAAE,CAJC,CAzCN;;AAAA;AAyCTT,UAAAA,OAzCS;AA8CfJ,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACII,UAAAA,KA/CW,GA+CJD,OAAM,GAAGA,OAAM,CAACC,IAAV,GAAiB,EA/CnB;AAAA,2CAgDRA,KAhDQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAoDAS,MAAM,CAACC,OAAP,GAAiB;AACf3B,EAAAA,UAAU,EAAVA;AADe,CAAjB","sourcesContent":["const axios = require('axios');\r\n\r\nconst {\r\n  SEARCH_REPOSITY_URL,\r\n  USER_REPOSITY_URL,\r\n  USER_STAR_URL,\r\n} = require('../config');\r\n\r\nconst getApiData = async (ctx, path) => {\r\n  let url = '';\r\n  // 根据客户端请求的 path 匹配对应的 github api url\r\n  switch (path) {\r\n    case '/api/user/repos':\r\n      url = USER_REPOSITY_URL;\r\n      break;\r\n    case '/api/user/starred':\r\n      url = USER_STAR_URL;\r\n      break;\r\n    case '/api/search':\r\n      let { q, lang, sort, order } = ctx.query;\r\n      params = { q, lang, sort, order };\r\n      url = `${SEARCH_REPOSITY_URL}?q=${q}&lang=${lang}&sort=${sort}&order=${order}`;\r\n    case '/api/detail':\r\n    default:\r\n      break;\r\n  }\r\n\r\n  // 判断当前为请求环境为服务端还是客户端（网页刷新和链接跳转）\r\n  let isServer = typeof window === 'undefined';\r\n  let headers = {};\r\n\r\n  // 客户端请求没有 ctx.session (ctx.req.session)，需代理到服务器上\r\n  if (!isServer) {\r\n    console.log(ctx);\r\n    // ctx.asPath = search?q=&lang=JavaScript&sort=&order=\r\n    let path = '/api' + ctx.asPath;\r\n    const result = await axios({ url: path, method: 'get' });\r\n    console.log(result);\r\n    let data = result.data.code === 0 ? result.data.data : [];\r\n    return data;\r\n  } else {\r\n    // 服务端可直接获取 ctx\r\n    const { oauth } = ctx.req.session;\r\n    const { token_type, access_token } = oauth ? oauth : {};\r\n    headers = oauth\r\n      ? {\r\n          Authorization: `${token_type} ${access_token}`,\r\n        }\r\n      : {};\r\n    const result = await axios({\r\n      url,\r\n      method: 'get',\r\n      headers,\r\n    }).catch((err) => {});\r\n    console.log('服务端获取数据成功');\r\n    let data = result ? result.data : [];\r\n    return data;\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getApiData,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}