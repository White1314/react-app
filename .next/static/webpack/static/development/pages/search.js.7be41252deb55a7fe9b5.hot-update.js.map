{"version":3,"file":"static/webpack/static\\development\\pages\\search.js.7be41252deb55a7fe9b5.hot-update.js","sources":["webpack:///./pages/search.tsx"],"sourcesContent":["import { isValidElement, useMemo, useCallback } from 'react';\r\nimport { withRouter } from 'next/router';\r\nimport Link from 'next/link';\r\nimport { Layout, List, Pagination } from 'antd';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getApiData } from '../server/utils.js';\r\nimport { getParamsToPath } from '../utils';\r\nimport * as actions from '../actions';\r\nimport { getLink } from '../utils';\r\nimport Repo from '../components/Repo';\r\n\r\nconst LANGUAGES = ['JavaScript', 'HTML', 'CSS', 'TypeScript', 'Java', 'Rust'];\r\nconst SORT_TYPES = [\r\n  { name: 'Best Match' },\r\n  { name: 'Most Stars', value: 'stars', order: 'dsc' },\r\n  { name: 'Fewest Stars', value: 'stars', order: 'asc' },\r\n  { name: 'Most Forks', value: 'forks', order: 'dsc' },\r\n  { name: 'Fewest Forks', value: 'forks', order: 'asc' },\r\n];\r\nconst selectedItemStyle = {\r\n  borderLeft: '2px solid #6739b6',\r\n  fontWeight: 100,\r\n};\r\nconst { Sider, Content } = Layout;\r\n\r\ninterface Item {\r\n  name: string;\r\n  value: string;\r\n  order: string;\r\n}\r\n\r\ninterface S {\r\n  search?: {\r\n    search_repo: any;\r\n  };\r\n}\r\n\r\nconst Search = ({ router }) => {\r\n  const { query } = router;\r\n\r\n  const total_count = useSelector(\r\n    (state: S) => state.search.search_repo.total_count\r\n  );\r\n  let items = useSelector((state: S) => state.search.search_repo.items);\r\n\r\n  const handleGetLink = useCallback((item, query) => getLink(item, query), []);\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <Layout>\r\n        <Sider>\r\n          <div className=\"menu\">\r\n            <List\r\n              bordered\r\n              header={<span className=\"list-header\">语言</span>}\r\n              style={{ marginBottom: 20 }}\r\n              dataSource={LANGUAGES}\r\n              renderItem={(item) => {\r\n                let selected = item === query.lang;\r\n                return (\r\n                  <List.Item style={selected ? selectedItemStyle : null}>\r\n                    {selected ? (\r\n                      <span>{item}</span>\r\n                    ) : (\r\n                      <Link href={getLink(item, query)}>\r\n                        <a>{item}</a>\r\n                      </Link>\r\n                    )}\r\n                  </List.Item>\r\n                );\r\n              }}\r\n            />\r\n            <List\r\n              bordered\r\n              header={<span className=\"list-header\">排序</span>}\r\n              dataSource={SORT_TYPES}\r\n              renderItem={(item: Item) => {\r\n                let selected = false;\r\n                if (item.name === 'Best Match' && !query.sort) {\r\n                  selected = true;\r\n                } else if (\r\n                  item.value === query.sort &&\r\n                  item.order === query.order\r\n                ) {\r\n                  selected = true;\r\n                }\r\n                return (\r\n                  <List.Item style={selected ? selectedItemStyle : null}>\r\n                    {selected ? (\r\n                      <span>{item.name}</span>\r\n                    ) : (\r\n                      <Link href={handleGetLink(item, query)}>\r\n                        <a>{item.name}</a>\r\n                      </Link>\r\n                    )}\r\n                  </List.Item>\r\n                );\r\n              }}\r\n            />\r\n          </div>\r\n        </Sider>\r\n        <Content>\r\n          <div className=\"content\">\r\n            <div className=\"items-warpper\">\r\n              <h3 className=\"repos-title\">{total_count} 个仓库</h3>\r\n              {items\r\n                ? items.map((item: any) => (\r\n                    <Repo repo={item} key={item.id}></Repo>\r\n                  ))\r\n                : null}\r\n            </div>\r\n            <div className=\"pagination\">\r\n              <Pagination\r\n                pageSize={30}\r\n                current={Number(query.page) || 1}\r\n                total={total_count}\r\n                onChange={() => {}}\r\n                itemRender={(page, type, ol) => {\r\n                  const p =\r\n                    type === 'page'\r\n                      ? page\r\n                      : type === 'prev'\r\n                      ? page - 1\r\n                      : page + 1;\r\n                  const a = type === 'page' ? page : ol;\r\n                  // a 可能是 页码 p 或者 Element ...\r\n                  return isValidElement(a) ? (\r\n                    a\r\n                  ) : (\r\n                    <Link href={handleGetLink(p, query)}>\r\n                      <a>{a}</a>\r\n                    </Link>\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Content>\r\n      </Layout>\r\n\r\n      <style jsx>{`\r\n        .root {\r\n          height: 100%;\r\n        }\r\n        .menu {\r\n          height: 100%;\r\n          overflow-x: hidden;\r\n          overflow-y: auto;\r\n          background: #fff;\r\n        }\r\n        .content {\r\n          height: 100%;\r\n          padding-left: 20px;\r\n          display: flex;\r\n          flex-direction: column;\r\n          background: #fff;\r\n        }\r\n        .items-warpper {\r\n          flex: 1;\r\n          overflow-y: auto;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearch.getInitialProps = async ({ ctx }) => {\r\n  // `https://api.github.com/search/repositories?q=${name}`\r\n  const { store, query } = ctx;\r\n  // api/search\r\n  const searchRepodata = await getApiData(\r\n    ctx,\r\n    `/search/repositories${getParamsToPath(query)}`\r\n  );\r\n  store.dispatch(actions.getSearchRepos(searchRepodata));\r\n};\r\n\r\nexport default withRouter(Search);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AAaA;AAAA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AAlBA;AAqBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAKA;AAzBA;AA8BA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AAGA;AArBA;AAhEA;AAAA;AAoHA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAIA;AAIA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;;;;A","sourceRoot":""}